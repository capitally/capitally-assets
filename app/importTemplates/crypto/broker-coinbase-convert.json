{
  "version": 3,
  "type": "Capitally Data Export",
  "exportedAt": "2024-04-30T13:54:34.057Z",
  "data": {
    "importTemplates": {
      "u-broker-coinbase": {
        "id": "u-broker-coinbase-convert",
        "name": "Coinbase - conversions",
        "author": "Capitally",
        "info": "> ☝️ This template is used only to import token conversions. If you had any, import the same file with the regular `Coinbase` template.\n\nTo import your conversions from Coinbase:\n\n1. Go to [Coinbase Statements](https://accounts.coinbase.com/statements) (by clicking your avatar in top-right corner)\n1. Choose All assets and a timeframe **Transactions** → **Generate custom statement** box \n1. Choose **CSV** format\n1. Click **Download**\n1. Open or drop that file here\n1. Import the same file with `Coinbase` template",
        "logoUrl": "/static/brokers/coinbase.png",
        "group": "Crypto",
        "updatedAt": "2024-05-01",
        "parser": {
          "id": "csv",
          "csv": {
            "header": true,
            "skipUntil": "^ID"
          }
        },
        "resolver": {
          "id": "transaction",
          "columns": {
            "$account": {
              "prop": "account",
              "mapping": {
                "type": "value",
                "value": {
                  "$template": "Coinbase",
                  "name": "Coinbase"
                }
              }
            },
            "Asset": {
              "prop": "asset",
              "mapping": {
                "type": "formula",
                "value": "=asset = regexMatch(col(\"Notes\"), \"Converted .+ to [\\\\d.]+ ([A-Z]+)\", 1); asset ? asset + \".CRYPTO\" : null"
              }
            },
            "Timestamp": {
              "prop": "date"
            },
            "Transaction Type": {
              "prop": "type",
              "valueMap": {
                "Withdrawal": null,
                "Receive": null,
                "Send": null,
                "Deposit": null,
                "Convert": "TRANSFER",
                "Buy": null,
                "Sell": null
              }
            },

            "Quantity Transacted": {
              "prop": "qty",
              "mapping": {
                "type": "formula",
                "value": "=regexMatch(col(\"Notes\"), \"Converted .+ to ([\\\\d.]+)\", 1)"
              }
            },
            "Price Currency": {
              "prop": "currency"
            },
            "Price at Transaction": {
              "prop": "price"
            },
            "Fees and/or Spread": {
              "prop": "fee"
            },
            "ID": {
              "prop": "reference"
            },
            "Notes": {
              "prop": "notes"
            }
          }
        },
        "generator": {
          "id": "transaction"
        }
      }
    }
  }
}
